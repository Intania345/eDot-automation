{"name": "Verify Created Company Detail Matches Input Data", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"text-placeholder line-clamp-1 text-gray-700\">...</span> is not clickable at point (439, 392). Other element would receive the click: <div class=\"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\" id=\":r3n:\" cmdk-item=\"\" role=\"option\" data-value=\"english\">...</div>\n  (Session info: chrome=140.0.7339.210); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n\tGetHandleVerifier [0x0x82c333+65459]\n\tGetHandleVerifier [0x0x82c374+65524]\n\t(No symbol) [0x0x64d973]\n\t(No symbol) [0x0x69dbc0]\n\t(No symbol) [0x0x69bf23]\n\t(No symbol) [0x0x6999c7]\n\t(No symbol) [0x0x698c66]\n\t(No symbol) [0x0x68d195]\n\t(No symbol) [0x0x6b9dfc]\n\t(No symbol) [0x0x68cbf4]\n\t(No symbol) [0x0x6b9fb4]\n\t(No symbol) [0x0x6db606]\n\t(No symbol) [0x0x6b9bf6]\n\t(No symbol) [0x0x68b38e]\n\t(No symbol) [0x0x68c274]\n\tGetHandleVerifier [0x0xaaeda3+2697763]\n\tGetHandleVerifier [0x0xaa9ec7+2677575]\n\tGetHandleVerifier [0x0x854194+228884]\n\tGetHandleVerifier [0x0x8449f8+165496]\n\tGetHandleVerifier [0x0x84b18d+192013]\n\tGetHandleVerifier [0x0x8347d8+99416]\n\tGetHandleVerifier [0x0x834972+99826]\n\tGetHandleVerifier [0x0x81ebea+10346]\n\tBaseThreadInitThunk [0x0x76b1fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x776982ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x7769827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"22ccf5e138d23344a25dce909e11de7e\")>\n\n    @allure.title(\"Verify Created Company Detail Matches Input Data\")\n    def test_verify_company_detail(driver):\n        login_page = LoginPage(driver)\n        company_page = CompanyPage(driver)\n    \n        # Login and then Create New Company\n>       test_create_company(driver)\n\nweb\\tests\\test_verify_company.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nweb\\tests\\test_create_company.py:44: in test_create_company\n    company_page.complete_register_company_step1(company_name, company_email, company_phone, company_address)\nweb\\pages\\company_page.py:123: in complete_register_company_step1\n    self.driver.find_element(*self.company_register_step1_country_field).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000216A6B90A50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...tRtlGetAppContainerNamedObjectPath [0x0x776982ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7769827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"text-placeholder line-clamp-1 text-gray-700\">...</span> is not clickable at point (439, 392). Other element would receive the click: <div class=\"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\" id=\":r3n:\" cmdk-item=\"\" role=\"option\" data-value=\"english\">...</div>\nE         (Session info: chrome=140.0.7339.210); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x82c333+65459]\nE       \tGetHandleVerifier [0x0x82c374+65524]\nE       \t(No symbol) [0x0x64d973]\nE       \t(No symbol) [0x0x69dbc0]\nE       \t(No symbol) [0x0x69bf23]\nE       \t(No symbol) [0x0x6999c7]\nE       \t(No symbol) [0x0x698c66]\nE       \t(No symbol) [0x0x68d195]\nE       \t(No symbol) [0x0x6b9dfc]\nE       \t(No symbol) [0x0x68cbf4]\nE       \t(No symbol) [0x0x6b9fb4]\nE       \t(No symbol) [0x0x6db606]\nE       \t(No symbol) [0x0x6b9bf6]\nE       \t(No symbol) [0x0x68b38e]\nE       \t(No symbol) [0x0x68c274]\nE       \tGetHandleVerifier [0x0xaaeda3+2697763]\nE       \tGetHandleVerifier [0x0xaa9ec7+2677575]\nE       \tGetHandleVerifier [0x0x854194+228884]\nE       \tGetHandleVerifier [0x0x8449f8+165496]\nE       \tGetHandleVerifier [0x0x84b18d+192013]\nE       \tGetHandleVerifier [0x0x8347d8+99416]\nE       \tGetHandleVerifier [0x0x834972+99826]\nE       \tGetHandleVerifier [0x0x81ebea+10346]\nE       \tBaseThreadInitThunk [0x0x76b1fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x776982ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7769827e+238]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "attachments": [{"name": "screenshot", "source": "e6b152ed-34f7-4bab-a86d-969fa2266ede-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "03ca7268-a4dd-4c75-914d-84e674705363-attachment.txt", "type": "text/plain"}], "start": 1759387735902, "stop": 1759387802871, "uuid": "3bd9ba54-9fe6-41bf-a59a-78b912fa48b9", "historyId": "d588254af2f06e7d257b81319dd50521", "testCaseId": "d588254af2f06e7d257b81319dd50521", "fullName": "web.tests.test_verify_company#test_verify_company_detail", "labels": [{"name": "parentSuite", "value": "web.tests"}, {"name": "suite", "value": "test_verify_company"}, {"name": "host", "value": "DESKTOP-M9M2I3E"}, {"name": "thread", "value": "8136-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "web.tests.test_verify_company"}], "titlePath": ["web", "tests", "test_verify_company.py"]}