{"name": "Verify Created Company Detail Matches Input Data", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 138\nCurrent browser version is 140.0.7339.207 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6ac69e935+77845]\n\tGetHandleVerifier [0x0x7ff6ac69e990+77936]\n\t(No symbol) [0x0x7ff6ac459cda]\n\t(No symbol) [0x0x7ff6ac49e53f]\n\t(No symbol) [0x0x7ff6ac49d58b]\n\t(No symbol) [0x0x7ff6ac496d7d]\n\t(No symbol) [0x0x7ff6ac4929e5]\n\t(No symbol) [0x0x7ff6ac4e62ce]\n\t(No symbol) [0x0x7ff6ac4e5a60]\n\t(No symbol) [0x0x7ff6ac4d86a3]\n\t(No symbol) [0x0x7ff6ac4a1791]\n\t(No symbol) [0x0x7ff6ac4a2523]\n\tGetHandleVerifier [0x0x7ff6ac97684d+3059501]\n\tGetHandleVerifier [0x0x7ff6ac970c0d+3035885]\n\tGetHandleVerifier [0x0x7ff6ac990400+3164896]\n\tGetHandleVerifier [0x0x7ff6ac6b8c3e+185118]\n\tGetHandleVerifier [0x0x7ff6ac6c054f+216111]\n\tGetHandleVerifier [0x0x7ff6ac6a72e4+113092]\n\tGetHandleVerifier [0x0x7ff6ac6a7499+113529]\n\tGetHandleVerifier [0x0x7ff6ac68e298+10616]\n\tBaseThreadInitThunk [0x0x7ffd3b0a7374+20]\n\tRtlUserThreadStart [0x0x7ffd3ba1cc91+33]", "trace": "@pytest.fixture(scope=\"function\")\n    def driver():\n        options = webdriver.ChromeOptions()\n        options.add_argument(\"--start-maximized\")\n>       driver = webdriver.Chrome(options=options)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nweb\\conftest.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:47: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:69: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:263: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:366: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F64D25E7B0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...ff6ac68e298+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffd3b0a7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffd3ba1cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 138\nE       Current browser version is 140.0.7339.207 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6ac69e935+77845]\nE       \tGetHandleVerifier [0x0x7ff6ac69e990+77936]\nE       \t(No symbol) [0x0x7ff6ac459cda]\nE       \t(No symbol) [0x0x7ff6ac49e53f]\nE       \t(No symbol) [0x0x7ff6ac49d58b]\nE       \t(No symbol) [0x0x7ff6ac496d7d]\nE       \t(No symbol) [0x0x7ff6ac4929e5]\nE       \t(No symbol) [0x0x7ff6ac4e62ce]\nE       \t(No symbol) [0x0x7ff6ac4e5a60]\nE       \t(No symbol) [0x0x7ff6ac4d86a3]\nE       \t(No symbol) [0x0x7ff6ac4a1791]\nE       \t(No symbol) [0x0x7ff6ac4a2523]\nE       \tGetHandleVerifier [0x0x7ff6ac97684d+3059501]\nE       \tGetHandleVerifier [0x0x7ff6ac970c0d+3035885]\nE       \tGetHandleVerifier [0x0x7ff6ac990400+3164896]\nE       \tGetHandleVerifier [0x0x7ff6ac6b8c3e+185118]\nE       \tGetHandleVerifier [0x0x7ff6ac6c054f+216111]\nE       \tGetHandleVerifier [0x0x7ff6ac6a72e4+113092]\nE       \tGetHandleVerifier [0x0x7ff6ac6a7499+113529]\nE       \tGetHandleVerifier [0x0x7ff6ac68e298+10616]\nE       \tBaseThreadInitThunk [0x0x7ffd3b0a7374+20]\nE       \tRtlUserThreadStart [0x0x7ffd3ba1cc91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException"}, "attachments": [{"name": "log", "source": "f3f17868-fe1c-4e95-abcb-4729b5e07263-attachment.txt", "type": "text/plain"}], "start": 1759331783662, "stop": 1759331783662, "uuid": "916a3f98-d34e-4532-84d0-3bcd27ee414e", "historyId": "d588254af2f06e7d257b81319dd50521", "testCaseId": "d588254af2f06e7d257b81319dd50521", "fullName": "web.tests.test_verify_company#test_verify_company_detail", "labels": [{"name": "parentSuite", "value": "web.tests"}, {"name": "suite", "value": "test_verify_company"}, {"name": "host", "value": "DESKTOP-M9M2I3E"}, {"name": "thread", "value": "3000-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "web.tests.test_verify_company"}], "titlePath": ["web", "tests", "test_verify_company.py"]}