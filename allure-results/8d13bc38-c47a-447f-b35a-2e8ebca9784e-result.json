{"name": "Verify Created Company Detail Matches Input Data", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[contains(text(), 'Retail')]\"}\n  (Session info: chrome=140.0.7339.210); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#nosuchelementexception\nStacktrace:\n\tGetHandleVerifier [0x0x75c333+65459]\n\tGetHandleVerifier [0x0x75c374+65524]\n\t(No symbol) [0x0x57d973]\n\t(No symbol) [0x0x5c76e7]\n\t(No symbol) [0x0x5c7a8b]\n\t(No symbol) [0x0x60dea2]\n\t(No symbol) [0x0x5e9e44]\n\t(No symbol) [0x0x60b606]\n\t(No symbol) [0x0x5e9bf6]\n\t(No symbol) [0x0x5bb38e]\n\t(No symbol) [0x0x5bc274]\n\tGetHandleVerifier [0x0x9deda3+2697763]\n\tGetHandleVerifier [0x0x9d9ec7+2677575]\n\tGetHandleVerifier [0x0x784194+228884]\n\tGetHandleVerifier [0x0x7749f8+165496]\n\tGetHandleVerifier [0x0x77b18d+192013]\n\tGetHandleVerifier [0x0x7647d8+99416]\n\tGetHandleVerifier [0x0x764972+99826]\n\tGetHandleVerifier [0x0x74ebea+10346]\n\tBaseThreadInitThunk [0x0x76b1fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x776982ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x7769827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"268cb2e3a2d42fec78a68bf103621271\")>\n\n    @allure.title(\"Verify Created Company Detail Matches Input Data\")\n    def test_verify_company_detail(driver):\n        login_page = LoginPage(driver)\n        company_page = CompanyPage(driver)\n    \n        # Login and then Create New Company\n        test_create_company(driver)\n        company_page.take_screenshot()\n    \n        # Company Detail Page\n        company_page.open_company_detail()\n>       company_page.verify_company_detail_page()\n\nweb\\tests\\test_verify_company.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nweb\\pages\\company_page.py:284: in verify_company_detail_page\n    self.driver.find_element(*self.detail_industryType_field).is_displayed()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001455C898A50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...tRtlGetAppContainerNamedObjectPath [0x0x776982ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7769827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[contains(text(), 'Retail')]\"}\nE         (Session info: chrome=140.0.7339.210); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#nosuchelementexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x75c333+65459]\nE       \tGetHandleVerifier [0x0x75c374+65524]\nE       \t(No symbol) [0x0x57d973]\nE       \t(No symbol) [0x0x5c76e7]\nE       \t(No symbol) [0x0x5c7a8b]\nE       \t(No symbol) [0x0x60dea2]\nE       \t(No symbol) [0x0x5e9e44]\nE       \t(No symbol) [0x0x60b606]\nE       \t(No symbol) [0x0x5e9bf6]\nE       \t(No symbol) [0x0x5bb38e]\nE       \t(No symbol) [0x0x5bc274]\nE       \tGetHandleVerifier [0x0x9deda3+2697763]\nE       \tGetHandleVerifier [0x0x9d9ec7+2677575]\nE       \tGetHandleVerifier [0x0x784194+228884]\nE       \tGetHandleVerifier [0x0x7749f8+165496]\nE       \tGetHandleVerifier [0x0x77b18d+192013]\nE       \tGetHandleVerifier [0x0x7647d8+99416]\nE       \tGetHandleVerifier [0x0x764972+99826]\nE       \tGetHandleVerifier [0x0x74ebea+10346]\nE       \tBaseThreadInitThunk [0x0x76b1fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x776982ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7769827e+238]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException"}, "attachments": [{"name": "screenshot", "source": "5695b848-3f16-4bfc-be9b-82c8c30d798f-attachment.png", "type": "image/png"}, {"name": "screenshot", "source": "f8e46391-b77d-40a8-86cd-8b01c16850a7-attachment.png", "type": "image/png"}, {"name": "screenshot", "source": "8d3a640e-7fba-4d5b-8907-01b758899c36-attachment.png", "type": "image/png"}, {"name": "screenshot", "source": "60d7090d-6ca9-4be6-b2ba-193747f5ec7b-attachment.png", "type": "image/png"}, {"name": "screenshot", "source": "b37b0a9f-4c50-41a4-a213-ce7257a9e5a7-attachment.png", "type": "image/png"}, {"name": "screenshot", "source": "b14e8b52-1ef0-4411-abc9-2661837be959-attachment.png", "type": "image/png"}, {"name": "screenshot", "source": "6a83d6a7-90e3-407f-bc20-d8f0a1b63223-attachment.png", "type": "image/png"}, {"name": "screenshot", "source": "74b152d4-d476-4aa4-8aea-e56f0d0a6787-attachment.png", "type": "image/png"}, {"name": "screenshot", "source": "ebac6acd-3b08-42b5-82d1-8ff24ca20510-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "3fc879d1-91fd-45d0-9156-89da140c3ef3-attachment.txt", "type": "text/plain"}], "start": 1759393738009, "stop": 1759393865675, "uuid": "2acdd35a-19d4-4199-aeb0-91de7873aead", "historyId": "d588254af2f06e7d257b81319dd50521", "testCaseId": "d588254af2f06e7d257b81319dd50521", "fullName": "web.tests.test_verify_company#test_verify_company_detail", "labels": [{"name": "parentSuite", "value": "web.tests"}, {"name": "suite", "value": "test_verify_company"}, {"name": "host", "value": "DESKTOP-M9M2I3E"}, {"name": "thread", "value": "11260-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "web.tests.test_verify_company"}], "titlePath": ["web", "tests", "test_verify_company.py"]}